import pandas as pd
import pandas_datareader as wb
import datetime

def getPriceExcel(
    tickerDictionary : dict, 
    startDate : datetime.date, 
    endDate : datetime.date,
    offer = "yahoo", 
    basePath = "./excelWarehouse/") -> None:

    """
    This function 'getPriceExcel' specifies a security code and a time period, 
    retrieves its stock price, and converts it to an Excel sheet for output.
    The destination path for the generated Excel file can be specified in the argument. 
    the default is './excelWarehouse/fileName.xlsx'.

    Args:
        tickerDictionary (dict) : The dictionary contains company names as keys and securities codes as values. 
                                    Dictionaries generated by 'minkabu.py' and "consoleInterface.py" are assumed.
        startDate (datetime.date) : Start date of stock acquisition. e.g. datetime.date(2022, 1, 1).
        endDate (datetime.date) : End date of stock acquisition. e.g. datetime.date(2025, 1, 1).
        offer (str) : Indicates from which API the stock price is obtained. Default is yahoo Finance.
        basePath (str) : Represents the path where the generated Excel file is saved.

    """ 

    #VARIABLES
    companies_list : list
    tickers_list : list
    savePath : str
    searchedTicker : str
    startInFileName : str
    endInFileName : str
    fileName : str
    df : pd.DataFrame

    ## PROCESS ##

    companies_list = []
    tickers_list = []
    for companies, tickers in tickerDictionary.items() :
        companies_list.append(companies)
        tickers_list.append(tickers)

    for company, ticker in zip(companies_list, tickers_list)  :
        searchedTicker = ticker + ".T"

        startInFileName = str(startDate).replace("-", "")
        endInFileName = str(endDate).replace("-", "")
        fileName = company + startInFileName + "-" + endInFileName + ".xlsx"
        
        savePath = basePath + fileName

        df = wb.DataReader(searchedTicker, offer, startDate, endDate) 

        df.to_excel(savePath, sheet_name = "newsheetname")

    return None


def getPriceDataFrame(
    tickerDictionary : dict, 
    startDate : datetime.date, 
    endDate : datetime.date,
    offer = "yahoo") -> dict:
    
    """
    This function 'getPriceDataFrame' specifies a security code and a time period, 
    retrieves its stock price, and map the data to the company name.

    Args:
        tickerDictionary (dict) : The dictionary contains company names as keys and securities codes as values. 
                                    Dictionaries generated by 'minkabu.py' and "consoleInterface.py" are assumed.
        startDate (datetime.date) : Start date of stock acquisition. e.g. datetime.date(2022, 1, 1).
        endDate (datetime.date) : End date of stock acquisition. e.g. datetime.date(2025, 1, 1).
        offer (str) : Indicates from which API the stock price is obtained. Default is yahoo Finance.
    
    Returns:
        dict : dictionary which maps the data to the company name. 

    """ 

    #VARIABLES
    companies_list : list
    tickers_list : list
    searchedTicker : str
    df : pd.DataFrame

    resultDictionary : dict

    ## PROCESS ##

    companies_list = []
    tickers_list = []
    for companies, tickers in tickerDictionary.items() :
        companies_list.append(companies)
        tickers_list.append(tickers)

    resultDictionary = {}

    for company, ticker in zip(companies_list, tickers_list)  :
        searchedTicker = ticker + ".T"

        df = wb.DataReader(searchedTicker, offer, startDate, endDate)
        
        resultDictionary[company] = df

    return resultDictionary


if __name__ == "__main__" :
    tickersDictionary = {'トヨタ自動車': '7203', 'ニトリホールディングス': '9843'}
    start = datetime.date(2020, 1, 1)
    end = datetime.date(2021, 1, 1)

    getPriceExcel(tickersDictionary, start, end)

    # result = getPriceDataFrame(tickersDictionary, start, end)
    # print(result["トヨタ自動車"])

    
